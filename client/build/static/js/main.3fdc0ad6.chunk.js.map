{"version":3,"sources":["components/InProgress.jsx","components/complete.jsx","components/remove.jsx","components/status.jsx","components/NewProject.jsx","App.jsx","serviceWorker.js","index.js"],"names":["InProgress","props","projectId","useState","Status","style","marginLeft","className","type","onClick","e","preventDefault","axios","put","then","res","console","log","data","Update","catch","err","Complete","Delete","delete","projects","setProjects","displayProjects","get","useEffect","filter","pro","map","key","_id","project","moment","date","format","Date","toDateString","color","to","NewProject","setProject","setDate","errors","setErrors","onSubmit","post","navigate","fontSize","float","width","placeholder","onChange","target","value","length","message","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.3fdc0ad6.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {Router, Link, navigate} from '@reach/router';\nimport axios from 'axios';\n\n\nconst InProgress = props => {\n    const {projectId} = props;\n    const [Status, setStatus] = useState(\"2\");\n\n\n    const statusUpdate = e => {\n        e.preventDefault();\n        axios.put('http://localhost:8000/api/projects/' + projectId ,{\n            Status\n        })\n            .then(res => {\n                console.log(res.data);\n                props.Update();\n            })\n            .catch(err => console.log(err) );\n        }\n        return (\n            <button style ={{marginLeft: \"200px\"}} className=\"button is-primary is outlined\" \n            type=\"submit\" onClick = {statusUpdate}> Start project </button> \n        )\n}\n\n\n\nexport default InProgress;\n\n","import React, {useState} from 'react';\nimport {Router, Link, navigate} from '@reach/router';\nimport axios from 'axios';\n\n\nconst Complete = props => {\n    const {projectId} = props;\n    const [Status, setStatus] = useState(\"3\")\n\n    const statusUpdate = e => {\n        e.preventDefault();\n        axios.put(`http://localhost:8000/api/projects/` + projectId , {\n            Status\n        })\n            .then(res => {\n                console.log(res.data);\n                props.Update();\n            })\n            .catch(err => console.log(err) );\n        }\n        return (\n            <button style ={{marginLeft: \"200px\"}} className=\"button is-primary is outlined\" \n            type=\"submit\" onClick = {statusUpdate}> Move to Complete </button> \n        )\n}\n\n\n\nexport default Complete;\n","import React, {useState} from 'react';\nimport {Router, Link, navigate} from '@reach/router';\nimport axios from 'axios';\n\n\n\n\nconst Delete = props => {\n    const {projectId} = props;\n    \n\n    const statusUpdate = e => {\n        e.preventDefault();\n        axios.delete(`http://localhost:8000/api/projects/` + projectId , {\n            \n        })\n            .then(res => {\n                console.log(res.data);\n                props.Update()\n            })\n            \n            .catch(err => console.log(err) );\n        }\n\n        return (\n\n        <button style ={{marginLeft: \"200px\"}} className=\"button is-danger is outlined\" \n        type=\"submit\" onClick = {statusUpdate}> Remove project </button> \n\n        )\n}\n\n\n\nexport default Delete;","import React, {useState, useEffect} from 'react';\nimport {Router, Link} from '@reach/router';\nimport axios from 'axios';\nimport moment from 'moment';\nimport InProgress from '../components/InProgress';\nimport Complete from '../components/complete';\nimport Delete from './remove';\n\n\nconst Status = props => {\n    const [projects, setProjects] = useState([]);\n\n    const displayProjects = () => {\n        axios.get(\"http://localhost:8000/api/projects\")\n            .then(res => setProjects(res.data))\n            .catch(err => console.log(err))\n    }\n    useEffect( () => {\n        displayProjects();\n\n    }, []);\n\n    function pastDueDate(date) {\n        return new Date(date) < new Date(new Date().toDateString())\n    }\n\n\n\n    return (\n    <div className=\"Wrapper is-desktop\">\n        <div className=\"columns is-gapless \">\n            <div className = \"column is-three-quarters-mobile \"> \n                <article className=\"message is-success\">\n                    <div className=\"message-header\">\n                        <p>Backlog</p>\n        </div>\n        {projects.filter(pro => pro.Status === \"1\").map(pro => \n        <div className=\"message-body\"  key={pro._id}>\n                <h5>{pro.project}</h5>\n                <p>Due: {moment(pro.date).format('MM-DD-YYYY')}</p> \n                <InProgress \n                projectId = {pro._id}\n                Update = {displayProjects}\n                />\n            </div> \n        )}\n        </article>\n    </div>\n    <div className = \"column  is-three-quarters-mobile \"> \n        <article className=\"message is-info\">\n            <div className=\"message-header\">\n                <p>In progress</p>\n        </div>\n            {projects.filter(pro => pro.Status === \"2\").map(pro => \n            <div className=\"message-body\"  key={pro._id}>\n                <h5>{pro.project}</h5>\n            { pastDueDate(pro.date) ? \n            <p style ={{color: \"red\" }}>Due:  {moment(pro.date).format('MM-DD-YYYY')}</p> :\n            <p>Due: {moment(pro.date).format('MM-DD-YYYY')}</p> \n            }\n            \n            <Complete \n            projectId = {pro._id}\n            Update = {displayProjects}\n            />\n        </div> \n        )}\n        </article>\n    </div>\n    <div className = \"column is-three-quarters-mobile \">\n        <article className=\"message is-warning\">\n            <div className=\"message-header\">\n                <p>Completed</p>\n        </div>\n            {projects.filter(pro => pro.Status === \"3\").map(pro => \n            <div className=\"message-body\"  key={pro._id}>\n            <h5>{pro.project}</h5>\n            <p>Due: {moment(pro.date).format('MM-DD-YYYY')}</p> \n                <Delete \n                projectId = {pro._id}\n                Update = {displayProjects}\n                />\n\n        </div> \n        )}\n        </article>\n    </div>\n    </div>\n        <button className=\"button is-primary\"> <Link to =\"/projects/new\"> Add New Projects</Link></button>\n    </div>\n    )\n}\n\nexport default Status;","import React, {useState} from 'react';\nimport {Router, Link, navigate} from '@reach/router';\nimport axios from 'axios';\nimport moment from 'moment';\n\n\n\n\nconst NewProject = props => {\n\nconst [project, setProject] = useState(\"\");\nconst [date, setDate] = useState(\"\");\nconst [Status, setStatus] = useState(\"1\");\nconst [errors, setErrors] = useState({});\n\n\nconst addProjects = e => {\n    e.preventDefault();\n    const projects = {project, date, Status:\"1\"}\n    axios.post(\"http://localhost:8000/api/projects/new\", \n    projects,\n    date,\n    Status,)\n        .then(res => {\n            if(res.data.errors) {\n                setErrors(res.data.errors);\n\n            }else{\n                navigate(\"/\")\n            }\n        })\n        .catch(err => console.log(err) );\n    }\n\n    return (\n        <form onSubmit={ addProjects }>\n            <h1 style ={{fontSize: \"40px\", marginLeft: \"200px\"}}>Plan a new project</h1>\n            <Link style ={{float: \"right\"}}to =\"/\"> Back to Dashboard</Link>\n            <div className=\"field\">\n                <div className=\"control\">\n                    <input  style ={{width: \"50%\" , marginLeft: \"200px\"}} className=\"input is-primary\" type=\"text\" placeholder=\"project\" onChange = {e => setProject(e.target.value)} value ={project} />\n                    {project.length < 3 ? <p style ={{width: \"50%\" , marginLeft: \"200px\"}} >project  must be at least 3 letters</p> : \"\" }\n                { \n                    errors.project ?\n                    <p style ={{width: \"50%\" , marginLeft: \"200px\"}}>{errors.project.message}</p> :\n                    \"\"\n                }\n                </div>\n            </div>   \n            <div className=\"field\">\n                <div className=\"control\">\n                <input style ={{width: \"50%\" , marginLeft: \"200px\"}} className=\"input is-primary\" type=\"date\" onChange = {e => setDate(e.target.value)} value={date} />\n                {date.length < 1 ? <p style ={{width: \"50%\" , marginLeft: \"200px\"}} >You must put date</p> : \"\" }\n                { \n                    errors.date ?\n                    <p style ={{width: \"50%\" , marginLeft: \"200px\"}}>{errors.date.message}</p> :\n                    \"\"\n                }\n        </div>      \n    </div>  \n            <button  style ={{marginLeft: \"200px\"}} className=\"button is-primary is outlined\" type=\"submit\" to =\"/\">  Plan a project </button>\n        </form>\n    )\n}\n\n\nexport default NewProject; ","import React from 'react';\nimport {Router, Link} from '@reach/router';\nimport 'bulma/css/bulma.min.css';\nimport Status from './components/status';\nimport NewProject from \"./components/NewProject\";\n\n\nfunction App() {\n  return (\n    <div className=\"container\">\n          <section className=\"hero is-medium is-primary is-bold\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\" style ={{fontSize: \"75px\"}} >\n              Project Manager\n            </h1>\n          </div>\n        </div>\n        </section>\n        <Router>\n          <Status path = \"/\"/>\n          <NewProject path =\"/projects/new\" />\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './status.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}